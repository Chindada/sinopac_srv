"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class StreamTickProto(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class TickData(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        CODE_FIELD_NUMBER: builtins.int
        DATE_TIME_FIELD_NUMBER: builtins.int
        OPEN_FIELD_NUMBER: builtins.int
        AVG_PRICE_FIELD_NUMBER: builtins.int
        CLOSE_FIELD_NUMBER: builtins.int
        HIGH_FIELD_NUMBER: builtins.int
        LOW_FIELD_NUMBER: builtins.int
        AMOUNT_FIELD_NUMBER: builtins.int
        TOTAL_AMOUNT_FIELD_NUMBER: builtins.int
        VOLUME_FIELD_NUMBER: builtins.int
        TOTAL_VOLUME_FIELD_NUMBER: builtins.int
        TICK_TYPE_FIELD_NUMBER: builtins.int
        CHG_TYPE_FIELD_NUMBER: builtins.int
        PRICE_CHG_FIELD_NUMBER: builtins.int
        PCT_CHG_FIELD_NUMBER: builtins.int
        BID_SIDE_TOTAL_VOL_FIELD_NUMBER: builtins.int
        ASK_SIDE_TOTAL_VOL_FIELD_NUMBER: builtins.int
        BID_SIDE_TOTAL_CNT_FIELD_NUMBER: builtins.int
        ASK_SIDE_TOTAL_CNT_FIELD_NUMBER: builtins.int
        SUSPEND_FIELD_NUMBER: builtins.int
        SIMTRADE_FIELD_NUMBER: builtins.int
        code: typing.Text = ...
        date_time: typing.Text = ...
        open: builtins.float = ...
        avg_price: builtins.float = ...
        close: builtins.float = ...
        high: builtins.float = ...
        low: builtins.float = ...
        amount: builtins.float = ...
        total_amount: builtins.float = ...
        volume: builtins.int = ...
        total_volume: builtins.int = ...
        tick_type: builtins.int = ...
        chg_type: builtins.int = ...
        price_chg: builtins.float = ...
        pct_chg: builtins.float = ...
        bid_side_total_vol: builtins.int = ...
        ask_side_total_vol: builtins.int = ...
        bid_side_total_cnt: builtins.int = ...
        ask_side_total_cnt: builtins.int = ...
        suspend: builtins.int = ...
        simtrade: builtins.int = ...
        def __init__(self,
            *,
            code : typing.Text = ...,
            date_time : typing.Text = ...,
            open : builtins.float = ...,
            avg_price : builtins.float = ...,
            close : builtins.float = ...,
            high : builtins.float = ...,
            low : builtins.float = ...,
            amount : builtins.float = ...,
            total_amount : builtins.float = ...,
            volume : builtins.int = ...,
            total_volume : builtins.int = ...,
            tick_type : builtins.int = ...,
            chg_type : builtins.int = ...,
            price_chg : builtins.float = ...,
            pct_chg : builtins.float = ...,
            bid_side_total_vol : builtins.int = ...,
            ask_side_total_vol : builtins.int = ...,
            bid_side_total_cnt : builtins.int = ...,
            ask_side_total_cnt : builtins.int = ...,
            suspend : builtins.int = ...,
            simtrade : builtins.int = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["amount",b"amount","ask_side_total_cnt",b"ask_side_total_cnt","ask_side_total_vol",b"ask_side_total_vol","avg_price",b"avg_price","bid_side_total_cnt",b"bid_side_total_cnt","bid_side_total_vol",b"bid_side_total_vol","chg_type",b"chg_type","close",b"close","code",b"code","date_time",b"date_time","high",b"high","low",b"low","open",b"open","pct_chg",b"pct_chg","price_chg",b"price_chg","simtrade",b"simtrade","suspend",b"suspend","tick_type",b"tick_type","total_amount",b"total_amount","total_volume",b"total_volume","volume",b"volume"]) -> None: ...

    EXCHANGE_FIELD_NUMBER: builtins.int
    TICK_FIELD_NUMBER: builtins.int
    exchange: typing.Text = ...
    @property
    def tick(self) -> global___StreamTickProto.TickData: ...
    def __init__(self,
        *,
        exchange : typing.Text = ...,
        tick : typing.Optional[global___StreamTickProto.TickData] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["tick",b"tick"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["exchange",b"exchange","tick",b"tick"]) -> None: ...
global___StreamTickProto = StreamTickProto
